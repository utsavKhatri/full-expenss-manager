// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String?
  token    String?
  isSocial Boolean @default(false)
  profile  String  @default("https://i.stack.imgur.com/l60Hf.png")

  accounts         Account[]          @relation("UserToAccount")
  sharedAccounts   Account[]          @relation("SharedAccounts")
  transactions     Transaction[]      @relation("UserToTransaction")
  AccountAnalytics AccountAnalytics[]
  Transaction      Transaction[]
}

model Transaction {
  id          String   @id @default(uuid())
  text        String
  amount      Float
  isIncome    Boolean
  transfer    String
  category    Category @relation(fields: [categoryId], references: [id])
  account     Account  @relation("AccountToTransaction", fields: [accountId], references: [id])
  accountId   String
  by          User     @relation("UserToTransaction", fields: [byId], references: [id])
  byId        String
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById String

  // Add more fields if needed
  categoryId String

  @@index([accountId])
  @@index([categoryId])
  @@index([byId])
  @@index([updatedById])
}

model Category {
  id          String        @id @default(uuid())
  name        String
  // Add more fields if needed
  Transaction Transaction[]
}

model Account {
  id           String            @id @default(uuid())
  name         String
  owner        User              @relation("UserToAccount", fields: [ownerId], references: [id])
  ownerId      String
  sharedWith   User[]            @relation("SharedAccounts")
  transactions Transaction[]     @relation("AccountToTransaction")
  analytics    AccountAnalytics?
  balance      Float             @default(0)

  @@index([ownerId])
}

model AccountAnalytics {
  id                      String  @id @default(uuid())
  account                 Account @relation(fields: [accountId], references: [id])
  accountId               String  @unique
  income                  Float   @default(0)
  expense                 Float   @default(0)
  balance                 Float?
  previousIncome          Float?
  previousExpense         Float?
  previousBalance         Float?
  incomePercentageChange  Float   @default(0)
  expensePercentageChange Float   @default(0)
  user                    User    @relation(fields: [userId], references: [id])
  userId                  String

  @@index([userId])
}
